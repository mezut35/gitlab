import asyncio
import re
import aiohttp
import logging
from telethon import TelegramClient, events

# -----------------------------------------------------------------------------
# Loglama Ayarları
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("telegram_bot.log"),
        logging.StreamHandler()
    ]
)

# -----------------------------------------------------------------------------
# Telegram API Bilgileri (Verilen Bilgiler)
api_id = 20642723
api_hash = "6c5e7c19f3a701201707ee28da0a40f6"
session_name = "amznbbt"
phone_number = "306940656110"  # Ülke kodu ile tam numara

# -----------------------------------------------------------------------------
# Kaynak ve Hedef Kanallar
SOURCE_CHANNELS = ["@couponsundrabatte2" , "@Beauty_Schoenheit" ]  # Mesajları dinleyeceğimiz kanal(lar)
TARGET_CHANNEL = "@bbtdeals"              # Dönüştürülmüş mesajların gönderileceği kanal

# -----------------------------------------------------------------------------
# Amazon Affiliate Ayarları
AFFILIATE_TAG = "bbtdeals0d-21"

# -----------------------------------------------------------------------------
# Amazon Link İşleme Sınıfı
class AmazonLinkProcessor:
    """
    Amazon linklerini açıp yönlenen final URL'den ürün ID'sini alır,
    ve bu ID üzerinden yalnızca affiliate tag parametresini içeren sade bir affiliate link oluşturur.

    Oluşturulan link formatı:
    https://www.amazon.de/dp/<PRODUCT_ID>?tag=AFFILIATE_TAG
    """
    def __init__(self, affiliate_tag, session):
        self.affiliate_tag = affiliate_tag
        self.session = session

    async def get_final_url(self, url: str) -> str:
        """Kısaltılmış veya yönlendiren Amazon linkini açar ve final URL'yi döndürür."""
        try:
            async with self.session.get(url, timeout=10, allow_redirects=True) as response:
                final_url = str(response.url)
                logging.info(f"🔄 Çözümlenen Link: {url} ➝ {final_url}")
                return final_url
        except Exception as e:
            logging.error(f"🔴 get_final_url hata: {e} - URL: {url}")
            return None

    def extract_product_id(self, url: str) -> str:
        """
        Final URL içerisinden Amazon ürün ID'sini (ASIN) çıkartır.
        Standart /dp/ veya /gp/product/ desenlerinin yanı sıra,
        bazı durumlarda URL içinde 'asin=' parametresi de bulunabilir.
        """
        patterns = [
            r'(?:/dp/|/gp/product/)([A-Z0-9]{10})',
            r'asin=([A-Z0-9]{10})'
        ]
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                product_id = match.group(1)
                logging.info(f"Ürün ID'si bulundu: {product_id}")
                return product_id
        logging.error(f"Ürün ID'si bulunamadı: {url}")
        return None

    def generate_affiliate_url(self, product_id: str) -> str:
        """Affiliate link oluşturur."""
        return f"https://www.amazon.de/dp/{product_id}?tag={self.affiliate_tag}"

    async def process_amazon_link(self, link: str) -> str:
        """Amazon linkini alır, yönlendirmeleri takip edip affiliate linke dönüştürür."""
        logging.info(f"🔄 Amazon link işleniyor: {link}")
        final_url = await self.get_final_url(link)
        if not final_url:
            logging.error("🔴 Amazon linki çözümlenemedi.")
            return None

        product_id = self.extract_product_id(final_url)
        if not product_id:
            logging.error(f"🔴 Ürün ID'si bulunamadı. Final URL: {final_url}")
            return None

        affiliate_url = self.generate_affiliate_url(product_id)
        logging.info(f"✅ Affiliate Link oluşturuldu: {affiliate_url}")
        return affiliate_url

# -----------------------------------------------------------------------------
# Telegram Giriş ve Doğrulama Fonksiyonu
async def login_to_telegram():
    client = TelegramClient(session_name, api_id, api_hash)
    await client.connect()

    if not await client.is_user_authorized():
        logging.info("🔵 Doğrulama kodu gönderiliyor...")
        await client.send_code_request(phone_number)
        code = input("📌 Telegram doğrulama kodunu girin: ")
        try:
            await client.sign_in(phone_number, code)
            logging.info("✅ Başarıyla giriş yapıldı!")
        except Exception as e:
            logging.error(f"🔴 Giriş hatası: {e}")
    else:
        logging.info("✅ Oturum zaten yetkilendirilmiş.")

    return client

# -----------------------------------------------------------------------------
# Mesajı İşleyip Hedef Kanala Gönderen Fonksiyon
async def forward_message(message, client, processor):
    try:
        # Raw text veya normal text alınır
        text = getattr(message, "raw_text", None) or (message.text or message.caption or "")
        if not text:
            logging.warning("⚠ Gelen mesajda okunabilir metin bulunamadı.")
        else:
            logging.info(f"📥 Mesaj yakalandı (kaynak kanal): {message.chat_id if message.chat_id else 'Bilinmiyor'}")
            logging.info("📄 Orijinal mesaj içeriği:\n" + text)

        # Amazon linklerini tespit eden regex: amazon.de, amzn.to, amzn.eu
        pattern = r"(https?://(?:www\.)?(?:amazon\.de|amzn\.to|amzn\.eu)[^\s]+)"
        found_links = re.findall(pattern, text)

        logging.info(f"🔍 Mesajda bulunan link adedi: {len(found_links)}")
        if found_links:
            logging.info("🔍 Tespit edilen linkler: " + ", ".join(found_links))
            conversion_failed = False
            for link in found_links:
                affiliate_link = await processor.process_amazon_link(link)
                if affiliate_link:
                    text = text.replace(link, affiliate_link)
                    logging.info(f"✏️ Link dönüştürüldü: {link} -> {affiliate_link}")
                else:
                    logging.error(f"🚨 Affiliate link oluşturulamadı: {link}")
                    conversion_failed = True
            if conversion_failed:
                logging.error("🚨 Bazı linkler dönüştürülemediği için mesaj gönderilmiyor.")
                return  # Dönüştürülemeyen link varsa mesaj gönderilmiyor.
        else:
            logging.info("🔍 Mesajda Amazon linki bulunamadı.")

        logging.info("💬 Dönüştürülmüş mesaj içeriği:\n" + text)
        try:
            await client.send_message(TARGET_CHANNEL, text)
            logging.info(f"✅ Dönüştürülmüş mesaj başarıyla gönderildi: Hedef Kanal: {TARGET_CHANNEL}")
        except Exception as send_error:
            logging.error(f"🚨 Mesaj gönderme hatası: {send_error}")
    except Exception as e:
        logging.error(f"🔴 Mesaj işleme hatası: {e}")

# -----------------------------------------------------------------------------
# Botun Mesajları Dinlemesini Sağlayan Fonksiyon
async def start_bot():
    client = await login_to_telegram()

    async with aiohttp.ClientSession() as aiohttp_session:
        processor = AmazonLinkProcessor(AFFILIATE_TAG, aiohttp_session)

        @client.on(events.NewMessage(chats=SOURCE_CHANNELS))
        async def channel_message_handler(event):
            logging.info("📨 Yeni mesaj alındı.")
            if event.message:
                try:
                    source = getattr(event.message.peer_id, "channel_id", "Bilinmiyor")
                    logging.info(f"📡 Mesajın geldiği kanal ID: {source}")
                except Exception as e:
                    logging.warning(f"⚠ Kaynak kanal bilgisi alınamadı: {e}")
                await forward_message(event.message, client, processor)
            else:
                logging.warning("⚠ Olayda mesaj verisi bulunamadı.")

        logging.info("🚀 Bot çalışıyor, mesajlar dinleniyor...")
        await client.run_until_disconnected()

# -----------------------------------------------------------------------------
# Botu Başlat
if __name__ == '__main__':
    try:
        asyncio.run(start_bot())
    except KeyboardInterrupt:
        logging.info("🛑 Program kapatılıyor...")

