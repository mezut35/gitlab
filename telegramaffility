import asyncio
import re
import aiohttp
import logging
from telethon import TelegramClient, events
from telethon.errors import RPCError, SessionPasswordNeededError, FloodWaitError

# -----------------------------------------------------------------------------
# Loglama Ayarları
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("telegram_bot.log"),
        logging.StreamHandler()
    ]
)

# -----------------------------------------------------------------------------
# Telegram API Bilgileri
api_id = 24974416
api_hash = "1c201b57b44b2fd17ef0d9de833bea57"
session_name = "aliveli"

# -----------------------------------------------------------------------------
# Kaynak ve Hedef Kanallar
# Kaynak kanallar listesini oluşturuyoruz:
SOURCE_CHANNELS = ["@couponsundrabatte2"]  # İstediğiniz kadar ekleyebilirsiniz.
TARGET_CHANNEL = "@bbttestamazon"      # Mesajın gönderileceği kanal

# -----------------------------------------------------------------------------
# Amazon Affiliate Ayarları
AFFILIATE_TAG = "bbtdeals0d-21"

# -----------------------------------------------------------------------------
# Session Headers (Gelecekte link işlemleri için kullanılabilir)
session_headers = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36"
}

# -----------------------------------------------------------------------------
# Amazon Link İşleme Sınıfı
class AmazonLinkProcessor:
    """
    Amazon kısa linklerini çözümler ve affiliate linke dönüştürür.
    Örneğin, 'https://amzn.to/4gud2Ae' linkini işleyip,
    'https://www.amazon.de/dp/<PRODUCT_ID>?th=1&linkCode=sl1&tag=AFFILIATE_TAG&language=de_DE&ref_=as_li_ss_tl'
    şeklinde dönüştürüyor.
    """
    def __init__(self, affiliate_tag, session):
        self.affiliate_tag = affiliate_tag
        self.session = session

    async def get_final_url(self, short_url: str) -> str:
        try:
            async with self.session.get(short_url, timeout=10, allow_redirects=True) as response:
                final_url = str(response.url)
                logging.info(f"🔄 Çözümlenen Link: {short_url} ➝ {final_url}")
                return final_url
        except Exception as e:
            logging.error(f"🔴 get_final_url hata: {e}")
            return None

    def extract_product_id(self, url: str) -> str:
        match = re.search(r'(?:/dp/|/gp/product/)([A-Z0-9]{10})', url)
        if match:
            product_id = match.group(1)
            logging.info(f"Ürün ID'si bulundu: {product_id}")
            return product_id
        logging.error(f"Ürün ID'si bulunamadı: {url}")
        return None

    def generate_affiliate_url(self, product_id: str) -> str:
        affiliate_url = (
            f"https://www.amazon.de/dp/{product_id}"
            f"?th=1&linkCode=sl1&tag={self.affiliate_tag}"
            "&language=de_DE&ref_=as_li_ss_tl"
        )
        return affiliate_url

    async def process_amazon_link(self, link: str) -> str:
        logging.info(f"🔄 Amazon link işleniyor: {link}")
        final_url = await self.get_final_url(link)
        if not final_url:
            logging.error("🔴 Amazon linki çözümlenemedi.")
            return None

        product_id = self.extract_product_id(final_url)
        if not product_id:
            logging.error(f"🔴 Ürün ID'si bulunamadı. Link: {final_url}")
            return None

        affiliate_url = self.generate_affiliate_url(product_id)
        logging.info(f"✅ Affiliate Link: {affiliate_url}")
        return affiliate_url

# -----------------------------------------------------------------------------
# Mesajdaki metni (orijinal formatı bozmadan) kopyalayıp,
# eğer mesajda rakip amazon linki varsa onun yerine dönüştürdüğümüz affiliate linki ekleyen fonksiyon
async def forward_message(message, client, processor):
    try:
        # Mesajın metin veya caption bilgisini alıyoruz
        text = message.text or message.caption or ""

        # Amazon rakip linkini (örneğin, "https://amzn.to/4gud2Ae") tespit et
        match = re.search(r'(https?://amzn\.to/\S+)', text)
        if match:
            competitor_link = match.group(1)
            # Rakip linki kendi affiliate linkimize dönüştür
            affiliate_link = await processor.process_amazon_link(competitor_link)
            if not affiliate_link:
                logging.error("Affiliate link oluşturulamadı, mesaj gönderilmiyor.")
                return
            # Kaynak mesajdaki tüm rakip amazon linklerini kaldırıyoruz.
            # (Link sonundaki boşluk veya satır sonlarını da kaldırır.)
            cleaned_text = re.sub(r'https?://amzn\.to/\S+\s*', '', text)
            # Yeni mesaj: ilk satırda bizim affiliate linkimiz, alt satırlarda orijinal metnin geri kalanı
            final_message = f"{affiliate_link}\n\n{cleaned_text}"
        else:
            # Eğer amazon linki yoksa, mesajı olduğu gibi kopyala
            final_message = text

        await client.send_message(TARGET_CHANNEL, final_message)
        logging.info("Mesaj başarıyla kopyalandı.")
    except Exception as e:
        logging.error(f"Mesaj kopyalama hatası: {e}")

# -----------------------------------------------------------------------------
# Telethon event listener: Sadece SOURCE_CHANNELS'dan gelen mesajları işler
def register_handlers(client, processor):
    @client.on(events.NewMessage(chats=SOURCE_CHANNELS))
    async def channel_message_handler(event):
        try:
            logging.info("Yeni mesaj yakalandı.")
            await forward_message(event.message, client, processor)
        except Exception as e:
            logging.error(f"channel_message_handler hatası: {e}")

# -----------------------------------------------------------------------------
# Botu sürekli çalışır halde tutan ana fonksiyon
async def start_bot():
    retry_delay = 5  # İlk yeniden bağlanma süresi 5 saniye
    client = TelegramClient(session_name, api_id, api_hash)

    async with aiohttp.ClientSession(headers=session_headers) as aiohttp_session:
        processor = AmazonLinkProcessor(AFFILIATE_TAG, aiohttp_session)
        register_handlers(client, processor)

        while True:
            try:
                logging.info("🚀 Bot başlatılıyor...")
                await client.connect()
                if not await client.is_user_authorized():
                    logging.warning("⚠ Bağlantı yetkisiz! Lütfen telefon numarası ile giriş yapın.")
                    await client.send_code_request("+905325674607")
                    code = input("Telegram Kodunu Girin: ")
                    await client.sign_in("+905325674607", code)
                logging.info("✅ Bağlantı başarılı, bot çalışıyor...")
                await client.run_until_disconnected()
            except FloodWaitError as e:
                wait_time = e.seconds
                logging.warning(f"🟡 FloodWaitError: {wait_time} saniye bekleniyor...")
                await asyncio.sleep(wait_time)
            except (RPCError, SessionPasswordNeededError, OSError) as e:
                logging.warning(f"🔄 Bağlantı hatası: {e}. {retry_delay} saniye sonra yeniden bağlanılıyor...")
                await asyncio.sleep(retry_delay)
                retry_delay = min(retry_delay * 2, 60)
            except Exception as e:
                logging.error(f"🔴 Beklenmedik hata: {e}")
                await asyncio.sleep(retry_delay)

# -----------------------------------------------------------------------------
# Program başlangıcı
if __name__ == '__main__':
    try:
        asyncio.run(start_bot())
    except KeyboardInterrupt:
        logging.info("Program kapatılıyor...")
